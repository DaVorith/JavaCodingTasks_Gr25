-------- Week01 --------------------------------
#Task1: 
	    ========== Numbers - Odd or even: ==========
     Write  a method which can identify given number is even or odd
     Output ex:
     identify(5); ->"Odd"
     identify(6); ->"Even"

#Task2:
	    ========== Numbers - Divide without / operator:==========
     Write a method that can divide two numbers without using division operator

#Task3:
		========== FIN - RA - FINRA ==========
	 Write a function which prints out the numbers from 1 to 30 but for numbers which are a multiple of 3, print "FIN" instead of the number and for numbers which are a multiple of 5, print "RA" instead of the number. For numbers which are a multiple of both 3 and 5, print "FINRA" instead of the number.


------------ Week02 --------------------------
#Task1: 
	     ========== Numbers -- Swap Numbers =========
    Swap two variable values without using a third variable

#Task2:
	     ========= Numbers -- Divisible by 3, 5, 15 ==============
    Write a program that can print the numbers between 1 ~ 100 that can be divisible by 3, 5, and 15.
    -if the number can be divisible by 3, 5 and 15, then it should only be displayed in DivisibelBy15 section
    -if the number can be divisible by 3 but cannot be divisible by 15, then it should only be displayed in DivisibelBy3 section
    -if the number can be divisible by 5 but cannot be divisible by 15, then it should only be displayed in DivisibelBy5 section

    ex:
    OutPut:
        Divisible By 15 15 30 45 60 75 90
        Divisible By 5 5 10 20 25 35 40 50 55 65 70 80 85 95 100
        Divisible By 3 3 6 9 12 18 21 24 27 33 36 39 42 48 51 54 57 63 66 69 72 78 81 84 87 93 96 99

#Task3:
    	===== Numbers -- print consecutive numbers ===============
    Write a function that, given a positive integer N, prints the consecutive
    numbers from 1 to N, each on a separate line. However, any number divisible
    by 2, 3 or 5 should be replaced by the word Codility, Test or Coders
    respectively. If a number is divisible by more than one of the numbers:
    2,3 or 5, it should be replaced by a concatenation of the respective words
    Codility, Test and Coders in this given order. For example, numbers divisible
    by both 2 and 3 should be replaced by CodilityTest and numbers divisible by
    all three numbers: 2,3 and 5, should be replaced by CodilityTestCoders.

	    For example, here is the output for N = 17:
	    1
	    Codility
	    Test
	    Codility
	    Coders
	    CodilityTest
	    7
	    Codility
	    Test
	    CodilityCoders
	    11
	    CodilityTest
	    13
	    Codility
	    TestCoders
	    Codility
	    17

-------- Week03 --------------------------------
#Task1: 
	     ============== Numbers -- PrimeNumber ===============
    Write a method that can check if a number is prime or not
    Note: Prime numbers are the natural positive numbers that are greater than 1 and also
    divisible by only 1 and the number itself.

#Task2:
	     ========== Numbers -- Reverse Negative Number ==========
    Write a return method that can reverse digits of a negative number and return it as int
    input: -35  output: -53

-------- Week04 --------------------------------
#Task1: 
	    ====== String - Frequency of Characters ==================`
    	Write a return method that can find the frequency of characters
            Ex: frequencyOfChars("AAABBCDD") ==> A3B2C1D2

#Task2:
	    ============  String - Same letters ================================
    	-Write a return method that checks if a string is built out of the same letters as
    	another string (in other words, they are Anagram or not)
	          Ex: same("abc", "cab"); ==> true
	              same("abc", "abb"); ==> false

#Task3:
	    =========== String - Remove Duplicates =====================
    	Write a return method that can remove the duplicated values from the String
            Ex: removeDup("AAABBBCCC") ==> ABC

-------- Week05 --------------------------------
#Task1: 
	    ============ String - Find the unique ==============================
      	Write a return method that can find the unique characters from the String
           Ex: unique("AAABBBCCCDEF") ==> "DEF";

#Task2:
	    ============= String -- Reverse ===========================
      	Write a function that can reverse a String
           Ex: Reverse("ABCD"); ==> DCBA

-------- Week06 --------------------------------
#Task1: 
	         ========== String_PasswordValidation ===================
        1. Write a return method that can verify if a password is valid or not.
        -Requirements:
        1. Password MUST be at least have 6 characters and should not contain space
        2. PassWord should at least contain one upper-case letter
        3. PassWord should at least contain one lowercase letter
        4. Password should at least contain one special character
        5. Password should at least contain a digit
        -if all requirements above are met, the method returns true, otherwise returns false

#Task2:
	        === Array_FindMaximum =============
        Write a method that can find the maximum number from an int Array
            Ex:  int[] arr = {99, 12, 23, 32, 44, 57, 6} ==> 6

#Task3:
	        ====== String_SumOfAllDigits ===============
        Write a method that can return the sum of the digits in a String
             Ex:  "12 java 5 apple 3"  ==>  20

-------- Week07 --------------------------------
#Task1: 
	       === Array_FindMinimum =============
        Write a method that can find the minimum number from an int Array
            Ex:  int[] arr = {99, 12, 23, 32, 44, 57, 6} ==> 6

#Task2:
	       ======= Array_SortAscending ==============
        Write a return method that can sort an int array in Ascending order without using the sort method Arrays class
                Ex: int[] arr = {10, 9, 8, 7};
                    arr = sortAscending(arr); ==>{ 7, 8, 9, 10};

#Task3:
	       ======= Array_SortDescending ==============
        Write a return method that can sort an int array in descending order without using the sort method Arrays class
                Ex: int[] arr = {10,20,7, 8, 90};
                    arr = Sort(arr); ==> {90, 20, 10, 8, 7};  


-------- Week08 --------------------------------
#Task1: 
	        ======= Array - N unique integers that sum up to 0 ============
        Write a function that, given an integer N (1 < N < 100), returns an array
        containing N unique integers that sum up to 0. The function can return any such array.
        For example, given N = 4, the function could return [1,0, -3, 2] or [-2, 1, -4, 5].
		The answer [1, -1, 1, 3] would be incorrect (because value 1 occurs twice).
        For N = 3 one of the possible answers is [-1, 0, 1] (but there are many more correct answers).

#Task2:
	        ===== Array - Move Zeros to the End =================
        Write a method that can move all the zeros to last indexes of the array (Do Not Use Sort Method)
            Ex:
                input:  {1,0,2,0,3,0,4,0};
                output: [1, 2, 3, 4, 0, 0, 0, 0]

-------- Week09 --------------------------------
#Task1: 
	         =====  Array -- Concat two arrays ========
        Write a return method that can concatenate two arrays

#Task2:
	        ======= ArrayList - Remove "Ahmed" ================
        Given a list of people' names: "Ahmed", "John", Eric", "Ahmed".....
        Write a java operation to remove all the names named Ahmed

#Task3:	
		    ====== ArrayList - Remove some values ===========
        Given a list of Integers 1, 2, 3, 4, 5, 6 ....etc.
        Remove all values greater than 100.


-------- Week10 --------------------------------
#Task1: 
	        ====== ArrayList - sorting in ascending ==============
	    Write a method that can sort the ArrayList in Ascending order without
	    using the sort method.

#Task2:
	        ====== ArrayList - sorting in descending ==============
	    Write a method that can sort the ArrayList in Ascending order without
	    using the sort method.

#Task3:	
		    ===== Map - Sort the map by values =========
    	Write a method that can sort the Map by values.


-------- Week11 --------------------------------
#Task1: 
	        =====  Map_Frequency of Characters ==========
        Write a method that prints the frequency of each character
        from a String.

#Task2:
	        ======= Map_Min value =============
        Write a method that can return the minimum
        value from a map (DO NOT use sort method).




	
	


	
